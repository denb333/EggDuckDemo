import { Mat4 } from '../../core/math/mat4.js';
import { Vec3 } from '../../core/math/vec3.js';

/**
 * @import { SoundManager } from './manager.js'
 */ /**
 * Represents an audio listener - used internally.
 */ class Listener {
    /**
     * Get the position of the listener.
     *
     * @returns {Vec3} The position of the listener.
     */ getPosition() {
        return this.position;
    }
    /**
     * Set the position of the listener.
     *
     * @param {Vec3} position - The new position of the listener.
     */ setPosition(position) {
        this.position.copy(position);
        var listener = this.listener;
        if (listener) {
            if ('positionX' in listener) {
                listener.positionX.value = position.x;
                listener.positionY.value = position.y;
                listener.positionZ.value = position.z;
            } else if (listener.setPosition) {
                listener.setPosition(position.x, position.y, position.z);
            }
        }
    }
    /**
     * Set the orientation matrix of the listener.
     *
     * @param {Mat4} orientation - The new orientation matrix of the listener.
     */ setOrientation(orientation) {
        this.orientation.copy(orientation);
        var listener = this.listener;
        if (listener) {
            var m = orientation.data;
            if ('forwardX' in listener) {
                listener.forwardX.value = -m[8];
                listener.forwardY.value = -m[9];
                listener.forwardZ.value = -m[10];
                listener.upX.value = m[4];
                listener.upY.value = m[5];
                listener.upZ.value = m[6];
            } else if (listener.setOrientation) {
                listener.setOrientation(-m[8], -m[9], -m[10], m[4], m[5], m[6]);
            }
        }
    }
    /**
     * Get the orientation matrix of the listener.
     *
     * @returns {Mat4} The orientation matrix of the listener.
     */ getOrientation() {
        return this.orientation;
    }
    /**
     * Get the listener.
     *
     * @type {AudioListener|null}
     */ get listener() {
        var context = this._manager.context;
        return context ? context.listener : null;
    }
    /**
     * Create a new listener instance.
     *
     * @param {SoundManager} manager - The sound manager.
     */ constructor(manager){
        /**
     * @type {Vec3}
     * @private
     */ this.position = new Vec3();
        /**
     * @type {Mat4}
     * @private
     */ this.orientation = new Mat4();
        this._manager = manager;
    }
}

export { Listener };
