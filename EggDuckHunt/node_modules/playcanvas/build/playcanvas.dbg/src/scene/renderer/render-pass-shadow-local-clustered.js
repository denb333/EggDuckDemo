import { RenderPass } from '../../platform/graphics/render-pass.js';

/**
 * A render pass used to render local clustered shadows. This is done inside a single render pass,
 * as all shadows are part of a single render target atlas.
 */ class RenderPassShadowLocalClustered extends RenderPass {
    update(localLights) {
        // prepare render targets / shadow cameras for rendering
        var shadowLights = this.shadowRendererLocal.shadowLights;
        var shadowCamera = this.shadowRendererLocal.prepareLights(shadowLights, localLights);
        // if any shadows need to be rendered
        var count = shadowLights.length;
        this.enabled = count > 0;
        if (count) {
            // setup render pass using any of the cameras, they all have the same pass related properties
            // Note that the render pass is set up to not clear the render target, as individual shadow maps clear it
            this.shadowRenderer.setupRenderPass(this, shadowCamera, false);
        }
    }
    execute() {
        var shadowLights = this.shadowRendererLocal.shadowLights;
        var count = shadowLights.length;
        for(var i = 0; i < count; i++){
            var light = shadowLights[i];
            for(var face = 0; face < light.numShadowFaces; face++){
                this.shadowRenderer.renderFace(light, null, face, true);
            }
        }
        shadowLights.length = 0;
    }
    constructor(device, shadowRenderer, shadowRendererLocal){
        super(device);
        this.requiresCubemaps = false;
        this.shadowRenderer = shadowRenderer;
        this.shadowRendererLocal = shadowRendererLocal;
    }
}

export { RenderPassShadowLocalClustered };
