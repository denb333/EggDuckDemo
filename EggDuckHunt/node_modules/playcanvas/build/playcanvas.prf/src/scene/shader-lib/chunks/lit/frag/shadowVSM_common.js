var shadowVSM_commonPS = "\nfloat linstep(float a, float b, float v) {\n	return saturate((v - a) / (b - a));\n}\nfloat reduceLightBleeding(float pMax, float amount) {\n   return linstep(amount, 1.0, pMax);\n}\nfloat chebyshevUpperBound(vec2 moments, float mean, float minVariance, float lightBleedingReduction) {\n	float variance = moments.y - (moments.x * moments.x);\n	variance = max(variance, minVariance);\n	float d = mean - moments.x;\n	float pMax = variance / (variance + (d * d));\n	pMax = reduceLightBleeding(pMax, lightBleedingReduction);\n	return (mean <= moments.x ? 1.0 : pMax);\n}\nfloat calculateEVSM(vec3 moments, float Z, float vsmBias, float exponent) {\n	Z = 2.0 * Z - 1.0;\n	float warpedDepth = exp(exponent * Z);\n	moments.xy += vec2(warpedDepth, warpedDepth*warpedDepth) * (1.0 - moments.z);\n	float VSMBias = vsmBias;\n	float depthScale = VSMBias * exponent * warpedDepth;\n	float minVariance1 = depthScale * depthScale;\n	return chebyshevUpperBound(moments.xy, warpedDepth, minVariance1, 0.1);\n}\n";

export { shadowVSM_commonPS as default };
