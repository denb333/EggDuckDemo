var particleInputRgba8PS = "\n#define PI2 6.283185307179586\nuniform vec3 inBoundsSize;\nuniform vec3 inBoundsCenter;\nuniform float maxVel;\nfloat decodeFloatRG(vec2 rg) {\n	return rg.y*(1.0/255.0) + rg.x;\n}\nfloat decodeFloatRGBA( vec4 rgba ) {\n  return dot( rgba, vec4(1.0, 1.0/255.0, 1.0/65025.0, 1.0/160581375.0) );\n}\nvoid readInput(float uv) {\n	vec4 tex0 = texture2D(particleTexIN, vec2(uv, 0.125));\n	vec4 tex1 = texture2D(particleTexIN, vec2(uv, 0.375));\n	vec4 tex2 = texture2D(particleTexIN, vec2(uv, 0.625));\n	vec4 tex3 = texture2D(particleTexIN, vec2(uv, 0.875));\n	inPos = vec3(decodeFloatRG(tex0.rg), decodeFloatRG(tex0.ba), decodeFloatRG(tex1.rg));\n	inPos = (inPos - vec3(0.5)) * inBoundsSize + inBoundsCenter;\n	inVel = tex2.xyz;\n	inVel = (inVel - vec3(0.5)) * maxVel;\n	inAngle = decodeFloatRG(tex1.ba) * PI2;\n	inShow = tex2.a > 0.5;\n	inLife = decodeFloatRGBA(tex3);\n	float maxNegLife = max(lifetime, (numParticles - 1.0) * (rate+rateDiv));\n	float maxPosLife = lifetime+1.0;\n	inLife = inLife * (maxNegLife + maxPosLife) - maxNegLife;\n}\n";

export { particleInputRgba8PS as default };
