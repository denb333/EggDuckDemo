var ltcPS = "\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nstruct Coords {\n	vec3 coord0;\n	vec3 coord1;\n	vec3 coord2;\n	vec3 coord3;\n};\nfloat LTC_EvaluateRect( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in Coords rectCoords) {\n	vec3 v1 = rectCoords.coord1 - rectCoords.coord0;\n	vec3 v2 = rectCoords.coord3 - rectCoords.coord0;\n	\n	vec3 lightNormal = cross( v1, v2 );\n	float factor = sign(-dot( lightNormal, P - rectCoords.coord0 ));\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 =  factor * cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords.coord0 - P );\n	coords[ 1 ] = mat * ( rectCoords.coord1 - P );\n	coords[ 2 ] = mat * ( rectCoords.coord2 - P );\n	coords[ 3 ] = mat * ( rectCoords.coord3 - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return result;\n}\nCoords dLTCCoords;\nCoords getLTCLightCoords(vec3 lightPos, vec3 halfWidth, vec3 halfHeight){\n	Coords coords;\n	coords.coord0 = lightPos + halfWidth - halfHeight;\n	coords.coord1 = lightPos - halfWidth - halfHeight;\n	coords.coord2 = lightPos - halfWidth + halfHeight;\n	coords.coord3 = lightPos + halfWidth + halfHeight;\n	return coords;\n}\nfloat dSphereRadius;\nCoords getSphereLightCoords(vec3 lightPos, vec3 halfWidth, vec3 halfHeight){\n	dSphereRadius = max(length(halfWidth), length(halfHeight));\n	vec3 f = reflect(normalize(lightPos - view_position), vNormalW);\n	vec3 w = normalize(cross(f, halfHeight));\n	vec3 h = normalize(cross(f, w));\n	return getLTCLightCoords(lightPos, w * dSphereRadius, h * dSphereRadius);\n}\nvec2 dLTCUV;\n#ifdef LIT_CLEARCOAT\nvec2 ccLTCUV;\n#endif\nvec2 getLTCLightUV(float gloss, vec3 worldNormal, vec3 viewDir)\n{\n	float roughness = max((1.0 - gloss) * (1.0 - gloss), 0.001);\n	return LTC_Uv( worldNormal, viewDir, roughness );\n}\nvec3 dLTCSpecFres;\n#ifdef LIT_CLEARCOAT\nvec3 ccLTCSpecFres;\n#endif\nvec3 getLTCLightSpecFres(vec2 uv, vec3 specularity)\n{\n	vec4 t2 = texture2DLod(areaLightsLutTex2, uv, 0.0);\n	return specularity * t2.x + ( vec3( 1.0 ) - specularity) * t2.y;\n}\nvoid calcLTCLightValues(float gloss, vec3 worldNormal, vec3 viewDir, vec3 specularity, float clearcoatGloss, vec3 clearcoatWorldNormal, float clearcoatSpecularity)\n{\n	dLTCUV = getLTCLightUV(gloss, worldNormal, viewDir);\n	dLTCSpecFres = getLTCLightSpecFres(dLTCUV, specularity); \n#ifdef LIT_CLEARCOAT\n	ccLTCUV = getLTCLightUV(clearcoatGloss, clearcoatWorldNormal, viewDir);\n	ccLTCSpecFres = getLTCLightSpecFres(ccLTCUV, vec3(clearcoatSpecularity));\n#endif\n}\nvoid calcRectLightValues(vec3 lightPos, vec3 halfWidth, vec3 halfHeight)\n{\n	dLTCCoords = getLTCLightCoords(lightPos, halfWidth, halfHeight);\n}\nvoid calcDiskLightValues(vec3 lightPos, vec3 halfWidth, vec3 halfHeight)\n{\n	calcRectLightValues(lightPos, halfWidth, halfHeight);\n}\nvoid calcSphereLightValues(vec3 lightPos, vec3 halfWidth, vec3 halfHeight)\n{\n	dLTCCoords = getSphereLightCoords(lightPos, halfWidth, halfHeight);\n}\nvec3 SolveCubic(vec4 Coefficient)\n{\n	float pi = 3.14159;\n	Coefficient.xyz /= Coefficient.w;\n	Coefficient.yz /= 3.0;\n	float A = Coefficient.w;\n	float B = Coefficient.z;\n	float C = Coefficient.y;\n	float D = Coefficient.x;\n	vec3 Delta = vec3(\n		-Coefficient.z * Coefficient.z + Coefficient.y,\n		-Coefficient.y * Coefficient.z + Coefficient.x,\n		dot(vec2(Coefficient.z, -Coefficient.y), Coefficient.xy)\n	);\n	float Discriminant = dot(vec2(4.0 * Delta.x, -Delta.y), Delta.zy);\n	vec3 RootsA, RootsD;\n	vec2 xlc, xsc;\n	{\n		float A_a = 1.0;\n		float C_a = Delta.x;\n		float D_a = -2.0 * B * Delta.x + Delta.y;\n		float Theta = atan(sqrt(Discriminant), -D_a) / 3.0;\n		float x_1a = 2.0 * sqrt(-C_a) * cos(Theta);\n		float x_3a = 2.0 * sqrt(-C_a) * cos(Theta + (2.0 / 3.0) * pi);\n		float xl;\n		if ((x_1a + x_3a) > 2.0 * B)\n			xl = x_1a;\n		else\n			xl = x_3a;\n		xlc = vec2(xl - B, A);\n	}\n	{\n		float A_d = D;\n		float C_d = Delta.z;\n		float D_d = -D * Delta.y + 2.0 * C * Delta.z;\n		float Theta = atan(D * sqrt(Discriminant), -D_d) / 3.0;\n		float x_1d = 2.0 * sqrt(-C_d) * cos(Theta);\n		float x_3d = 2.0 * sqrt(-C_d) * cos(Theta + (2.0 / 3.0) * pi);\n		float xs;\n		if (x_1d + x_3d < 2.0 * C)\n			xs = x_1d;\n		else\n			xs = x_3d;\n		xsc = vec2(-D, xs + C);\n	}\n	float E =  xlc.y * xsc.y;\n	float F = -xlc.x * xsc.y - xlc.y * xsc.x;\n	float G =  xlc.x * xsc.x;\n	vec2 xmc = vec2(C * F - B * G, -B * F + C * E);\n	vec3 Root = vec3(xsc.x / xsc.y, xmc.x / xmc.y, xlc.x / xlc.y);\n	if (Root.x < Root.y && Root.x < Root.z)\n		Root.xyz = Root.yxz;\n	else if (Root.z < Root.x && Root.z < Root.y)\n		Root.xyz = Root.xzy;\n	return Root;\n}\nfloat LTC_EvaluateDisk(vec3 N, vec3 V, vec3 P, mat3 Minv, Coords points)\n{\n	vec3 T1, T2;\n	T1 = normalize(V - N * dot(V, N));\n	T2 = cross(N, T1);\n	mat3 R = transposeMat3( mat3( T1, T2, N ) );\n	vec3 L_[ 3 ];\n	L_[ 0 ] = R * ( points.coord0 - P );\n	L_[ 1 ] = R * ( points.coord1 - P );\n	L_[ 2 ] = R * ( points.coord2 - P );\n	vec3 Lo_i = vec3(0);\n	vec3 C  = 0.5 * (L_[0] + L_[2]);\n	vec3 V1 = 0.5 * (L_[1] - L_[2]);\n	vec3 V2 = 0.5 * (L_[1] - L_[0]);\n	C  = Minv * C;\n	V1 = Minv * V1;\n	V2 = Minv * V2;\n	float a, b;\n	float d11 = dot(V1, V1);\n	float d22 = dot(V2, V2);\n	float d12 = dot(V1, V2);\n	if (abs(d12) / sqrt(d11 * d22) > 0.0001)\n	{\n		float tr = d11 + d22;\n		float det = -d12 * d12 + d11 * d22;\n		det = sqrt(det);\n		float u = 0.5 * sqrt(tr - 2.0 * det);\n		float v = 0.5 * sqrt(tr + 2.0 * det);\n		float e_max = (u + v) * (u + v);\n		float e_min = (u - v) * (u - v);\n		vec3 V1_, V2_;\n		if (d11 > d22)\n		{\n			V1_ = d12 * V1 + (e_max - d11) * V2;\n			V2_ = d12 * V1 + (e_min - d11) * V2;\n		}\n		else\n		{\n			V1_ = d12*V2 + (e_max - d22)*V1;\n			V2_ = d12*V2 + (e_min - d22)*V1;\n		}\n		a = 1.0 / e_max;\n		b = 1.0 / e_min;\n		V1 = normalize(V1_);\n		V2 = normalize(V2_);\n	}\n	else\n	{\n		a = 1.0 / dot(V1, V1);\n		b = 1.0 / dot(V2, V2);\n		V1 *= sqrt(a);\n		V2 *= sqrt(b);\n	}\n	vec3 V3 = normalize(cross(V1, V2));\n	if (dot(C, V3) < 0.0)\n		V3 *= -1.0;\n	float L  = dot(V3, C);\n	float x0 = dot(V1, C) / L;\n	float y0 = dot(V2, C) / L;\n	float E1 = inversesqrt(a);\n	float E2 = inversesqrt(b);\n	a *= L * L;\n	b *= L * L;\n	float c0 = a * b;\n	float c1 = a * b * (1.0 + x0 * x0 + y0 * y0) - a - b;\n	float c2 = 1.0 - a * (1.0 + x0 * x0) - b * (1.0 + y0 * y0);\n	float c3 = 1.0;\n	vec3 roots = SolveCubic(vec4(c0, c1, c2, c3));\n	float e1 = roots.x;\n	float e2 = roots.y;\n	float e3 = roots.z;\n	vec3 avgDir = vec3(a * x0 / (a - e2), b * y0 / (b - e2), 1.0);\n	mat3 rotate = mat3(V1, V2, V3);\n	avgDir = rotate * avgDir;\n	avgDir = normalize(avgDir);\n	float L1 = sqrt(-e2 / e3);\n	float L2 = sqrt(-e2 / e1);\n	float formFactor = max(0.0, L1 * L2 * inversesqrt((1.0 + L1 * L1) * (1.0 + L2 * L2)));\n	\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	vec2 uv = vec2(avgDir.z * 0.5 + 0.5, formFactor);\n	uv = uv*LUT_SCALE + LUT_BIAS;\n	float scale = texture2DLod(areaLightsLutTex2, uv, 0.0).w;\n	return formFactor*scale;\n}\nfloat getRectLightDiffuse(vec3 worldNormal, vec3 viewDir, vec3 lightDir, vec3 lightDirNorm) {\n	return LTC_EvaluateRect( worldNormal, viewDir, vPositionW, mat3( 1.0 ), dLTCCoords );\n}\nfloat getDiskLightDiffuse(vec3 worldNormal, vec3 viewDir, vec3 lightDir, vec3 lightDirNorm) {\n	return LTC_EvaluateDisk( worldNormal, viewDir, vPositionW, mat3( 1.0 ), dLTCCoords );\n}\nfloat getSphereLightDiffuse(vec3 worldNormal, vec3 viewDir, vec3 lightDir, vec3 lightDirNorm) {\n	float falloff = dSphereRadius / (dot(lightDir, lightDir) + dSphereRadius);\n	return getLightDiffuse(worldNormal, viewDir, lightDir, lightDirNorm) * falloff;\n}\nmat3 getLTCLightInvMat(vec2 uv)\n{\n	vec4 t1 = texture2DLod(areaLightsLutTex1, uv, 0.0);\n	return mat3(\n		vec3( t1.x, 0, t1.y ),\n		vec3(	0, 1,	0 ),\n		vec3( t1.z, 0, t1.w )\n	);\n}\nfloat calcRectLightSpecular(vec3 worldNormal, vec3 viewDir, vec2 uv) {\n	mat3 mInv = getLTCLightInvMat(uv);\n	return LTC_EvaluateRect( worldNormal, viewDir, vPositionW, mInv, dLTCCoords );\n}\nfloat getRectLightSpecular(vec3 worldNormal, vec3 viewDir) {\n	return calcRectLightSpecular(worldNormal, viewDir, dLTCUV);\n}\nfloat calcDiskLightSpecular(vec3 worldNormal, vec3 viewDir, vec2 uv) {\n	mat3 mInv = getLTCLightInvMat(uv);\n	return LTC_EvaluateDisk( worldNormal, viewDir, vPositionW, mInv, dLTCCoords );\n}\nfloat getDiskLightSpecular(vec3 worldNormal, vec3 viewDir) {\n	return calcDiskLightSpecular(worldNormal, viewDir, dLTCUV);\n}\nfloat getSphereLightSpecular(vec3 worldNormal, vec3 viewDir) {\n	return calcDiskLightSpecular(worldNormal, viewDir, dLTCUV);\n}\n";

export { ltcPS as default };
